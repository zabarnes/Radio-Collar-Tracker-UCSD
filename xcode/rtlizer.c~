#include <cairo.h>
#include <gdk/gdkkeysyms.h>
#include <gtk/gtk.h>
#include <rtl-sdr.h>
#include <stdlib.h>

#include "kiss_fft.h"

#define DEFAULT_WINDOW_HIGHT 	512
#define DEFAULT_CENTER_FREQ 	150000000
#define DEFAULT_GOAL_FREQ 	150083000
#define DEFAULT_SAMPLE_RATE	1000000
#define HORIZONTAL_GRID_LINES	10
#define VERTICAL_GRID_LINES	12
#define FFT_SIZE		1024
#define DEFAULT_GAIN 		0	// Default gain in tenths of dB
#define DYNAMIC_RANGE 		120.f	// -dBFS coreresponding to bottom of screen
#define SCREEN_FRAC 		0.9f	// Fraction of screen height used for FFT
#define PLOT_HISTORY		0
#define FREQ_ERROR_MARGIN	30000
#define SIG_STR_BUFF_SIZE	10
#define FLOAT_FLOOR		-1e12

uint8_t *buffer;
uint32_t dev_index 	= 0;
uint32_t frequency 	= DEFAULT_CENTER_FREQ;
uint32_t samp_rate 	= DEFAULT_SAMPLE_RATE;
uint32_t goal_freq 	= DEFAULT_GOAL_FREQ;

uint32_t buff_len	= 2*FFT_SIZE;
kiss_fft_cfg  fft_cfg;
kiss_fft_cpx *fft_in;
kiss_fft_cpx *fft_out;
float         *log_pwr_fft; // dbFS relative to 1.0
float         *log_pwr_fft_max; // dbFS relative to 1.0
float *signStrBuffer; 
float scale;
float maxSignalVal	= FLOAT_FLOOR; 
float maxAux		= FLOAT_FLOOR; 
float noiseFloor	= 0; 
float currSigStrenght	= 0; 
int yzero 		= 0;
int text_margin 	= 0;
int goalFreqBin		= (int)(((float)(DEFAULT_GOAL_FREQ - DEFAULT_CENTER_FREQ + DEFAULT_SAMPLE_RATE/2)/DEFAULT_SAMPLE_RATE)*FFT_SIZE);
int defaultgoalFreqBin	= (int)(((float)(DEFAULT_GOAL_FREQ - DEFAULT_CENTER_FREQ + DEFAULT_SAMPLE_RATE/2)/DEFAULT_SAMPLE_RATE)*FFT_SIZE);
int freq_error_gap	= ((float)FREQ_ERROR_MARGIN/DEFAULT_SAMPLE_RATE)*FFT_SIZE;
int currentBufferVal	= 0;
int indexMaxAux		= 0;   

static rtlsdr_dev_t *dev = NULL;
static gint width, height; // screen width and height
static gboolean freq_changed = TRUE;

static gboolean delete_event(GtkWidget *widget, GdkEvent *e, gpointer d); 

static void destroy(GtkWidget *widget, gpointer data);

gint keypress_cb(GtkWidget *widget, GdkEvent *event, gpointer data);

static int db_to_pixel(float dbfs);

static void adjust_frequency();

static void draw_text(cairo_t *cr);

static void draw_fft(cairo_t *cr);

static void setup_rtlsdr();

static gboolean read_rtlsdr();

static void run_fft();

gint timeout_cb(gpointer darea);

int main(int argc, char *argv[]){

    // GtkWidget is the storage type for widgets
    GtkWidget *window;
    guint  tid;
    
    gtk_init (&argc, &argv);
    window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_widget_add_events(window, GDK_KEY_PRESS_MASK);

    g_signal_connect(window, "delete-event", 	G_CALLBACK (delete_event), 	NULL);
    g_signal_connect(window, "destroy", 	G_CALLBACK (destroy), 		NULL);
    g_signal_connect(window, "key_press_event",	G_CALLBACK (keypress_cb),	NULL);

    // default window size if no geometry is specified
    width	= FFT_SIZE;
    height 	= DEFAULT_WINDOW_HIGHT; //gdk_screen_height();
    if (argc > 1){
        if (!gtk_window_parse_geometry(GTK_WINDOW(window), argv[1]))
            fprintf(stderr, "Failed to parse '%s'\n", argv[1]);
        else
            gtk_window_get_default_size(GTK_WINDOW(window), &width, &height);
    }

    gtk_window_set_default_size(GTK_WINDOW(window), width, height);
    scale 	= (float)height/DYNAMIC_RANGE * SCREEN_FRAC;
    yzero 	= (int)(height*(1.0f-SCREEN_FRAC));
    text_margin	= yzero/10;

    g_print("window size: %dx%d pixels\n", width, height);
    g_print("SCALE: %.2f / Y0: %d / TXTMARG: %d\n", scale, yzero, text_margin);

    gtk_widget_show(window);
    gdk_window_set_cursor(gtk_widget_get_window(window), gdk_cursor_new(GDK_BLANK_CURSOR));

    // set up FFT
    fft_cfg 		= kiss_fft_alloc(FFT_SIZE, FALSE, NULL, NULL);
    fft_in 		= malloc(width * sizeof(kiss_fft_cpx));
    fft_out 		= malloc(width * sizeof(kiss_fft_cpx));
    log_pwr_fft		= malloc(width * sizeof(float));
    log_pwr_fft_max	= malloc(width * sizeof(float));

	int i; 
    for (i = 0; i < FFT_SIZE; i++)
	log_pwr_fft_max[i] = FLOAT_FLOOR; 

    setup_rtlsdr();

    tid = g_timeout_add(50, timeout_cb, window);
    
    gtk_main();
    
    g_source_remove(tid);
    
    return 0;
}


static gboolean delete_event(GtkWidget *widget, GdkEvent *e, gpointer d){
    return FALSE;
}

static void destroy(GtkWidget *widget, gpointer data){
	rtlsdr_close(dev);
	free(buffer);
	free(signStrBuffer);
	free(fft_cfg);
	free(fft_in);
	free(fft_out);
	free(log_pwr_fft);
	free(log_pwr_fft_max);

	gtk_main_quit();
}

gint keypress_cb(GtkWidget *widget, GdkEvent *event, gpointer data){
	guint event_handled = TRUE;
    int r;
	
	switch (event->key.keyval)
	{
	case GDK_KEY_Return:
		/* exit application */
		gtk_widget_destroy(widget);
		break;

	case GDK_KEY_Left:
		/* increase frequency */
        frequency += samp_rate/4;
        r = rtlsdr_set_center_freq(dev, frequency);
        if (r < 0)
            fprintf(stderr, "WARNING: Failed to set center freq.\n");
        break;

	case GDK_KEY_Right:
		/* decrease frequency */
        frequency -= samp_rate/4;
        r = rtlsdr_set_center_freq(dev, frequency);
        if (r < 0)
            fprintf(stderr, "WARNING: Failed to set center freq.\n");
        break;

	case GDK_KEY_Up:
		/* increase bandwidth with 200 kHz */
        if (samp_rate < 2400000)
        {
            samp_rate += 200000;
            r = rtlsdr_set_sample_rate(dev, samp_rate);
            if (r < 0)
                fprintf(stderr, "WARNING: Failed to set sample rate.\n");
        }
        break;

	case GDK_KEY_Down:
		/* decrease bandwidth with 100 kHz */
        if (samp_rate > 600000)
        {
            samp_rate -= 200000;
            r = rtlsdr_set_sample_rate(dev, samp_rate);
            if (r < 0)
                fprintf(stderr, "WARNING: Failed to set sample rate.\n");
        }
        break;

	default:
		event_handled = FALSE;
		break;
	}

	return event_handled;
}

static int db_to_pixel(float dbfs){
    return yzero+(int)(-dbfs*scale);
}

static void adjust_frequency(){
	int i; 
	maxSignalVal = FLOAT_FLOOR; 
	for (i = defaultgoalFreqBin - freq_error_gap; i < defaultgoalFreqBin + freq_error_gap; i++){
		if( log_pwr_fft_max[i] > maxSignalVal){
			maxSignalVal	= log_pwr_fft_max[i]; 
			goalFreqBin 	= i;  
		}
	}
}

static void draw_text(cairo_t *cr){
    cairo_text_extents_t cte;
    double txt1_y, txt2_y;

    gchar *freq_str = g_strdup_printf("%.3f MHz", 1.e-6f*(float)frequency);
    gchar *delta_str = g_strdup_printf("BW: %.1f MHz   RBW: %.2f kHz   GF: %.3f MHz   EM: %.3f kHz   FEG: %d bins   MA: %.1f dB   SNR: %.1f dB   SS: %.1f dB   CA: %.1f dB ",
                                       	1.e-6f*(float)samp_rate,
                                       	1.e-3f*(float)(samp_rate/FFT_SIZE),
					1.e-6f*(goalFreqBin*((float)(samp_rate/FFT_SIZE))+(DEFAULT_CENTER_FREQ - DEFAULT_SAMPLE_RATE/2)),
                                       	1.e-3f*(float)FREQ_ERROR_MARGIN,
					freq_error_gap, 
					log_pwr_fft_max[goalFreqBin],
					log_pwr_fft_max[goalFreqBin] - noiseFloor,
					currSigStrenght,  
					log_pwr_fft[goalFreqBin]
					);

    /* clear area */
    cairo_set_source_rgb(cr, 0.02, 0.02, 0.09);
    cairo_set_line_width(cr, 1.0);
    cairo_rectangle(cr, 0, 0, width, yzero);
    cairo_stroke_preserve(cr);
    cairo_fill(cr);

    cairo_select_font_face(cr, "Sans",
                           CAIRO_FONT_SLANT_NORMAL,
                           CAIRO_FONT_WEIGHT_BOLD);
    cairo_set_font_size(cr, 24);
    cairo_text_extents(cr, freq_str, &cte);
    txt1_y = text_margin + cte.height;
    cairo_set_source_rgba(cr, 0.97, 0.98, 0.02, 0.8);
    cairo_move_to(cr, text_margin, txt1_y);
    cairo_show_text(cr, freq_str);

    cairo_set_font_size(cr, 12);
    cairo_text_extents(cr, delta_str, &cte);
    txt2_y = txt1_y + cte.height + text_margin;
    cairo_set_source_rgba(cr, 0.97, 0.98, 0.02, 0.8);
    cairo_move_to(cr, text_margin, txt2_y);
    cairo_show_text(cr, delta_str);

	// Frequency Grid Display
	cairo_set_font_size(cr, 8);	
	cairo_set_source_rgba(cr, 0.0, 1.0, 0.2, 1.0);
	int x; 
	for (x = 0; x < HORIZONTAL_GRID_LINES; x ++ ){
    		gchar *freq_grid_str = g_strdup_printf("%.3f", 1.e-6f*(float)(frequency-samp_rate/2+(x*width/HORIZONTAL_GRID_LINES)*(samp_rate/FFT_SIZE)));
		cairo_move_to(cr, (int)(x*width/HORIZONTAL_GRID_LINES), height);
		cairo_show_text(cr, freq_grid_str);
		g_free(freq_grid_str);
	}
	for (x = 0; x < VERTICAL_GRID_LINES; x ++ ){
    		gchar *freq_grid_str = g_strdup_printf("%d", -10*x);
		cairo_move_to(cr, 0, db_to_pixel(-10*x));
		cairo_show_text(cr, freq_grid_str);
		g_free(freq_grid_str);
	}

    g_free(freq_str);
    g_free(delta_str);
}

static void draw_fft(cairo_t *cr){

	cairo_set_source_rgb(cr, 0.02, 0.02, 0.09);
	cairo_set_line_width(cr, 1.0);

	cairo_rectangle(cr, 0, yzero, width, height);
	cairo_paint (cr);

	// Max FFT history plot
	int x;
	if(PLOT_HISTORY){
		cairo_set_source_rgba(cr, 0.2, 0.2, 0.2, 1.0);
		for (x = 0; x < width; x++ ){
			cairo_move_to(cr, x, height);
			cairo_line_to(cr, x, db_to_pixel(log_pwr_fft_max[x]));
		}
		cairo_stroke(cr);
	}

	// FFT plot
	cairo_set_source_rgba(cr, 0.7, 0.7, 0.7, 1.0);
	for (x = 0; x < width; x++ ){
		cairo_move_to(cr, x, height);
		cairo_line_to(cr, x, db_to_pixel(log_pwr_fft[x]));
	}
	cairo_stroke(cr);

	// HORIZONTAL Grid Plot
	cairo_set_source_rgba(cr, 0.0, 1.0, 0.2, 0.5);
	for (x = 0; x < HORIZONTAL_GRID_LINES; x ++ ){
		cairo_move_to(cr, (int)(x*width/HORIZONTAL_GRID_LINES), height);
		cairo_line_to(cr, (int)(x*width/HORIZONTAL_GRID_LINES), 0);
	}

	// Vertical Grid Plot
	for (x = 0; x < VERTICAL_GRID_LINES; x ++ ){
		cairo_move_to(cr, 0, db_to_pixel(-10*x));
		cairo_line_to(cr, width, db_to_pixel(-10*x));
	}
	cairo_stroke(cr);

	// Goal Frequency Cross
	cairo_set_source_rgba(cr, 1.0, 0.0, 0.0, 0.75);
		cairo_move_to(cr, 0, db_to_pixel(log_pwr_fft_max[goalFreqBin]));
		cairo_line_to(cr, width, db_to_pixel(log_pwr_fft_max[goalFreqBin]));
		cairo_move_to(cr, goalFreqBin, height);
		cairo_line_to(cr, goalFreqBin, 0);
	cairo_stroke(cr);

	// Noise Floor
	cairo_set_source_rgba(cr, 1.0, 1.0, 0.0, 0.75);
		cairo_move_to(cr, 0, db_to_pixel(noiseFloor));
		cairo_line_to(cr, width, db_to_pixel(noiseFloor));
	cairo_stroke(cr);

	// Signal validation
	if(log_pwr_fft[goalFreqBin] > noiseFloor){
		signStrBuffer[currentBufferVal] = log_pwr_fft[goalFreqBin]; 
		currentBufferVal++; 
		if(currentBufferVal > SIG_STR_BUFF_SIZE)
			currentBufferVal = 0; 
		maxAux = FLOAT_FLOOR; 
		int i; 
		for (i = 0; i < SIG_STR_BUFF_SIZE; i++)
			if(signStrBuffer[i] > maxAux)
				maxAux = signStrBuffer[i];
		currSigStrenght = maxAux; 
	}

 
}

static void setup_rtlsdr(){

	int device_count;
	int r;

	buffer = malloc(buff_len * sizeof(uint8_t));
	signStrBuffer = malloc(SIG_STR_BUFF_SIZE * sizeof(float));
	int i; 
	for (i = 0; i < SIG_STR_BUFF_SIZE; i++)
		signStrBuffer[i] = 0; 

	device_count = rtlsdr_get_device_count();
	if (!device_count){
		fprintf(stderr, "No supported devices found.\n");
		exit(1);
	}

	r = rtlsdr_open(&dev, dev_index);
	if (r < 0){
		fprintf(stderr, "Failed to open rtlsdr device #%d.\n", dev_index);
		exit(1);
	}

	r = rtlsdr_set_sample_rate(dev, samp_rate);
	if (r < 0)
		fprintf(stderr, "WARNING: Failed to set sample rate.\n");

	r = rtlsdr_set_center_freq(dev, frequency);
	if (r < 0)
		fprintf(stderr, "WARNING: Failed to set center freq.\n");

	// Setting gain mode (auto(0) or manual(1))
	r = rtlsdr_set_tuner_gain_mode(dev, 1);
	if (r < 0)
		fprintf(stderr, "WARNING: Failed to enable manual gain.\n");

	// Setting gain value
	r = rtlsdr_set_tuner_if_gain(dev, 0, 434);
	if (r < 0)
		fprintf(stderr, "WARNING: Failed to set up fixed gain.\n");

	r = rtlsdr_reset_buffer(dev);
	if (r < 0)
		fprintf(stderr, "WARNING: Failed to reset buffers.\n");

}

static gboolean read_rtlsdr(){

    gboolean error = FALSE;
    int n_read;
    int r;

    r = rtlsdr_read_sync(dev, buffer, buff_len, &n_read);
    if (r < 0) {
        fprintf(stderr, "WARNING: sync read failed.\n");
        error = TRUE;
    }

    if ((uint32_t)n_read < buff_len) {
        fprintf(stderr, "Short read (%d / %d), samples lost, exiting!\n", n_read, buff_len);
        error = TRUE;
    }

    return error;
}

static void run_fft(){   

    int i;
    kiss_fft_cpx pt;
    float pwr;
    
    for (i = 0; i < FFT_SIZE; i++){
        fft_in[i].r = ((float)buffer[2*i])/255.f;
        fft_in[i].i = ((float)buffer[2*i+1])/255.f;
    }

    kiss_fft(fft_cfg, fft_in, fft_out);

	noiseFloor = 0; 
    for (i = 0; i < FFT_SIZE; i++){
        // shift, normalize and convert to dBFS
        if (i < FFT_SIZE / 2){
            pt.r = fft_out[FFT_SIZE/2+i].r / FFT_SIZE;
            pt.i = fft_out[FFT_SIZE/2+i].i / FFT_SIZE;
        }else{
            pt.r = fft_out[i-FFT_SIZE/2].r / FFT_SIZE;
            pt.i = fft_out[i-FFT_SIZE/2].i / FFT_SIZE;
        }
        pwr = pt.r * pt.r + pt.i * pt.i;
        
        log_pwr_fft[i] = 10.f * log10(pwr + 1.0e-20f);
	
	noiseFloor += log_pwr_fft_max[i]; 

	// Updating the maximum history value for each FFT bin
	if(log_pwr_fft[i] > log_pwr_fft_max[i])
		log_pwr_fft_max[i] = log_pwr_fft[i]; 

	adjust_frequency(); 
    }
	noiseFloor /= FFT_SIZE; 
}

gint timeout_cb(gpointer darea){

	// get samples from rtlsdr
	if (read_rtlsdr())
        return FALSE;  // error reading
    
	// calculate FFT
	run_fft();
	
	// update plot
	cairo_t *cr;
	cr = gdk_cairo_create(gtk_widget_get_window(GTK_WIDGET(darea)));
	draw_fft(cr);
	if (freq_changed)
		draw_text(cr);
	cairo_destroy(cr);
	
	return TRUE;
}

